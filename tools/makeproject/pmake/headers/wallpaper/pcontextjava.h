const char PCONTEXTJAVA_STR[] = 
"/*\n"
" * Copyright 2012 - 2014 Future Interface. \n"
" * This software is licensed under the terms of the MIT license.\n"
" */\n"
"package com.fi.tech;\n"
"\n"
"import javax.microedition.khronos.egl.EGL10;\n"
"import javax.microedition.khronos.opengles.GL10;\n"
"import javax.microedition.khronos.egl.EGLConfig;\n"
"\n"
"import android.util.Log;\n"
"\n"
"/**\n"
" *\n"
" */\n"
"public class PContext \n"
"{\n"
"    /* Library state is needed for tracking pause/resume behavior */\n"
"    private static final int STATE_IDLE = 0;\n"
"    private static final int STATE_STARTING = 1;\n"
"    private static final int STATE_RUNNING = 2;\n"
"    private static final int STATE_PAUSING = 3;\n"
"    private static final int STATE_PAUSED = 4;\n"
"    private static final int STATE_RESUMING = 5;\n"
"    private static final int STATE_STOPPING = 6;\n"
"\n"
"    private int mState;\n"
"    private int mContextId;\n"
"    private String mContextName;\n"
"\n"
"    public static final boolean DEBUG = false;\n"
"    // Below enum value is to indicate the orientation value (Ref\n"
"    // http://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_LANDSCAPE\n"
"    // )\n"
"    public static final int SCREEN_ORIENTATION_LANDSCAPE = 0;\n"
"    public static final int SCREEN_ORIENTATION_PORTRAIT = 1;\n"
"\n"
"    private static native void createContextNative(String contextName);\n"
"\n"
"    private static native int getContextIdByNameNative(String contextName);\n"
"    \n"
"    private static native boolean initializeContextNative(int contextId, int width, int height);\n"
"\n"
"    private static native void uninitializeContextNative(int contextId);\n"
"\n"
"    private static native void pauseNative(int contextId);\n"
"\n"
"    private static native void resumeNative(int contextId);\n"
"    \n"
"    private static native void resizeNative(int contextId, int width, int height);\n"
"    \n"
"    private static native void orientationChangeNative(int contextId, int orientation);\n"
"\n"
"    private static native boolean updateNative(int contextId);\n"
"\n"
"    public static native long touchEventNative(int contextId, int cursorCount, int state);\n"
"\n"
"    public static native void touchCursorNative(int contextId, long touchEvent,\n"
"            int index, int id, float x, float y, float pressure, float area,\n"
"            int state, long timeStamp);\n"
"\n"
"    public static native void focusEventNative(int contextId, boolean focusState);\n"
"\n"
"    public static native void keyEventNative(int contextId, int buttonCode, int state, long timeStamp);\n"
"\n"
"    public static native void setFreeCameraNative(int contextId, boolean state);\n"
"    \n"
"    public static native void setHUDNative(int contextId, boolean state);\n"
"\n"
"    public PContext(String contextName) \n"
"    {\n"
"        mState = STATE_STARTING;\n"
"        mContextName = contextName;\n"
"        createContextNative(mContextName);\n"
"    }\n"
"\n"
"    public boolean initialize(int width, int height) \n"
"    {\n"
"        mState = STATE_STARTING;\n"
"        mContextId = getContextIdByNameNative(mContextName);\n"
"        if (mContextId == -1)\n"
"        {\n"
"            Log.e(\"Paper3D\", \"initialize: Failed to find context called\" + mContextName);\n"
"            return false;\n"
"        }\n"
"        if (initializeContextNative(mContextId, width, height))\n"
"        {\n"
"            mState = STATE_RUNNING;\n"
"            return true;\n"
"        }\n"
"        return false;\n"
"    }\n"
"\n"
"    public void uninitialize() \n"
"    {\n"
"        mState = STATE_STOPPING;\n"
"        uninitializeContextNative(mContextId);\n"
"        mState = STATE_IDLE;\n"
"        mContextId = -1;\n"
"    }\n"
"\n"
"    public boolean isInitialized() \n"
"    {\n"
"        return ((mState == STATE_RUNNING) || (mState == STATE_PAUSED)\n"
"                || (mState == STATE_PAUSING) || (mState == STATE_RESUMING));\n"
"    }\n"
"\n"
"    public boolean isPaused() \n"
"    {\n"
"        return (mState == STATE_PAUSED);\n"
"    }\n"
"\n"
"    public void pause() \n"
"    {\n"
"        mState = STATE_PAUSING;\n"
"        pauseNative(mContextId);\n"
"        mState = STATE_PAUSED;\n"
"    }\n"
"\n"
"    public void resume() \n"
"    {\n"
"        mState = STATE_RESUMING;\n"
"        resumeNative(mContextId);\n"
"        mState = STATE_RUNNING;\n"
"    }\n"
"    \n"
"    public void onSurfaceCreated(GL10 gl, EGLConfig config) \n"
"    {\n"
"    }\n"
"\n"
"    public void resize(int width, int height) \n"
"    {\n"
"        resizeNative(mContextId, width, height);\n"
"    }\n"
"\n"
"    public void update() \n"
"    {\n"
"        if (!updateNative(mContextId)) \n"
"        {\n"
"            mState = STATE_STOPPING;\n"
"        }\n"
"    }\n"
"\n"
"    /**\n"
"     * set the orientation . use PNativeLibrary.SCREEN_ORIENTATION_LANDSCAPE or\n"
"     * PNativeLibrary.SCREEN_ORIENTATION_PORTRAIT\n"
"     * \n"
"     * @param orientation\n"
"     */\n"
"    public void orientationChange(int orientation) \n"
"    {\n"
"        orientationChangeNative(mContextId, orientation);\n"
"    }\n"
"\n"
"    public int getState() \n"
"    {\n"
"        return mState;\n"
"    }\n"
"\n"
"    /**\n"
"     * @param touchEvent\n"
"     * @param index\n"
"     * @param id\n"
"     * @param x\n"
"     * @param y\n"
"     * @param pressure\n"
"     * @param area\n"
"     * @param state\n"
"     */\n"
"    public long touchEvent(int cursorCount, int state) \n"
"    {\n"
"        return touchEventNative(mContextId, cursorCount, state);\n"
"    }\n"
"\n"
"    /**\n"
"     * @param touchEvent\n"
"     * @param index\n"
"     * @param id\n"
"     * @param x\n"
"     * @param y\n"
"     * @param pressure\n"
"     * @param area\n"
"     * @param state\n"
"     */\n"
"    public void touchCursor(long touchEvent, int index, int id, float x,\n"
"            float y, float pressure, float area, int state, long timeStamp) \n"
"    {\n"
"        touchCursorNative(mContextId, touchEvent, index, id, x, y, pressure,\n"
"                area, state, timeStamp);\n"
"    }\n"
"\n"
"    /**\n"
"     * @param focusState\n"
"     */\n"
"    public void focusEvent(boolean focusState) \n"
"    {\n"
"        focusEventNative(mContextId, focusState);\n"
"    }\n"
"\n"
"    /**\n"
"     * @param buttonCode\n"
"     * @param state\n"
"     */\n"
"    public void keyEvent(int buttonCode, int state, long timeStamp) \n"
"    {\n"
"        keyEventNative(mContextId, buttonCode, state, timeStamp);\n"
"    }\n"
"\n"
"    /**\n"
"     * debug function: switch Head-Up Display on or off\n"
"     * \n"
"     * @param state\n"
"     */\n"
"    public void setHUD(boolean state) \n"
"    {\n"
"        setHUDNative(mContextId, state);\n"
"    }\n"
"\n"
"    /**\n"
"     * debug function: switch free camera movement on or off\n"
"     * \n"
"     * @param state\n"
"     */\n"
"    public void setFreeCamera(boolean state) \n"
"    {\n"
"        setFreeCameraNative(mContextId, state);\n"
"    }\n"
"\n"
"}\n"
;
