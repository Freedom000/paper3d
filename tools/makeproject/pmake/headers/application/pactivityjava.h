const char PACTIVITYJAVA_STR[] = 
"/*\n"
" * Copyright 2012-2014 Future Interface. All rights reserved.\n"
" * This software is licensed under the terms of the MIT license.\n"
" * \n"
" */\n"
"package com.fi.tech;\n"
"\n"
"import java.util.Calendar;\n"
"import java.util.GregorianCalendar;\n"
"\n"
"import android.app.Activity;\n"
"import android.content.Context;\n"
"import android.os.Bundle;\n"
"import android.os.Debug;\n"
"import android.os.PowerManager;\n"
"import android.util.Log;\n"
"import android.view.ViewGroup;\n"
"\n"
"/**\n"
" * Implement your own activity so that it extends PActivity.\n"
" */\n"
"public class PActivity extends Activity {\n"
"	private static final String TAG = \"Paper3D\";\n"
"	private static final String CONTEXT_NAME = \"%s\";\n"
"\n"
"	public String PACKAGE_NAME;\n"
"\n"
"	static final int NUM_CONTEXTS = 16;\n"
"	public int deviceWidth = 0;\n"
"	public int deviceHeight = 0;\n"
"\n"
"	protected PView mView = null;\n"
"	protected PowerManager.WakeLock wl;\n"
"	protected PNativeLibrary mNativeLibrary = null; // FIXME: to be shared among\n"
"							// activities.\n"
"\n"
"	/**\n"
"	 * @param icicle\n"
"	 *            mapping to various Parcelable types\n"
"	 */\n"
"	@Override\n"
"	protected void onCreate(Bundle icicle) {\n"
"		PACKAGE_NAME = super.getPackageName();\n"
"		if (PContext.DEBUG) {\n"
"			Debug.startMethodTracing(TAG.toLowerCase());\n"
"		}\n"
"		super.onCreate(icicle);\n"
"		mNativeLibrary = PNativeLibrary.getInstance();\n"
"		mNativeLibrary.initialize(this);\n"
"		if (mNativeLibrary.getState() == PNativeLibrary.STATE_INITIALIZED) {\n"
"			// The view name should be as same as the\n"
"			// protoss's context name.\n"
"			// For each context, we should create a view.\n"
"			setView(getView(CONTEXT_NAME));\n"
"\n"
"			Log.v(TAG, \"setting wakelock\");\n"
"			PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n"
"			wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, TAG);\n"
"\n"
"			/* Enable key events. */\n"
"			mView.setFocusableInTouchMode(true);\n"
"		} else {\n"
"			Log.e(TAG,\n"
"					\"Failed to load/initialize protoss native library. Quitting.\");\n"
"			finish();\n"
"		}\n"
"	}\n"
"\n"
"	@Override\n"
"	protected void onDestroy() {\n"
"		super.onDestroy();\n"
"		Log.i(TAG, \"onDestroy\");\n"
"		if (PContext.DEBUG) {\n"
"			Debug.stopMethodTracing();\n"
"		}\n"
"\n"
"		mView.onDestroy();\n"
"	}\n"
"\n"
"	/**\n"
"	 * @return reference to current PView\n"
"	 */\n"
"	protected PView getView(String contextName) {\n"
"		if (mView == null) {\n"
"			mView = new PView(this, contextName);\n"
"		}\n"
"		return mView;\n"
"	}\n"
"\n"
"	/**\n"
"	 * Attach view to parent and notify Protoss native side that the view\n"
"	 * reference has been updated.\n"
"	 * \n"
"	 * @param view\n"
"	 */\n"
"	protected void setView(PView view) {\n"
"		if (view != null) {\n"
"			mView = view; // store the view\n"
"			addContentView(mView, new ViewGroup.LayoutParams(\n"
"					ViewGroup.LayoutParams.MATCH_PARENT,\n"
"					ViewGroup.LayoutParams.MATCH_PARENT));\n"
"		}\n"
"	}\n"
"\n"
"	/**\n"
"	 * @see android.app.Activity#onStop()\n"
"	 */\n"
"	@Override\n"
"	protected void onStop() {\n"
"		super.onStop();\n"
"		Log.i(TAG, \"onStop\");\n"
"		if (PContext.DEBUG) {\n"
"			Debug.stopMethodTracing();\n"
"		}\n"
"	}\n"
"\n"
"	/**\n"
"	 * @see android.app.Activity#onPause()\n"
"	 */\n"
"	@Override\n"
"	protected void onPause() {\n"
"		super.onPause();\n"
"		Log.i(TAG, \"onPause\");\n"
"		mView.onPause();\n"
"	}\n"
"\n"
"	/**\n"
"	 * @see android.app.Activity#onResume()\n"
"	 */\n"
"	@Override\n"
"	protected void onResume() {\n"
"		super.onResume();\n"
"		Log.i(TAG, \"onResume\");\n"
"		mView.onResume();\n"
"	}\n"
"\n"
"	public int getDeviceHeight() {\n"
"		if (deviceHeight != 0) {\n"
"			// Log.e(\"height\", \"1:\"+height);\n"
"			return deviceHeight;\n"
"		}\n"
"		deviceHeight = getResources().getDisplayMetrics().heightPixels;\n"
"		return deviceHeight;\n"
"	}\n"
"\n"
"	public int getDeviceWidth() {\n"
"		if (deviceWidth != 0)\n"
"			return deviceWidth;\n"
"		deviceWidth = getResources().getDisplayMetrics().widthPixels;\n"
"		return deviceWidth;\n"
"	}\n"
"\n"
"	public int getDay() {\n"
"		final Calendar c = GregorianCalendar.getInstance();\n"
"		return c.get(Calendar.DAY_OF_WEEK);\n"
"	}\n"
"\n"
"	public int getDateDay() {\n"
"		final Calendar c = GregorianCalendar.getInstance();\n"
"		return c.get(Calendar.DAY_OF_MONTH);\n"
"	}\n"
"\n"
"	public int getDateMonth() {\n"
"		final Calendar c = GregorianCalendar.getInstance();\n"
"		return c.get(Calendar.MONTH);\n"
"	}\n"
"\n"
"	public int getDateYear() {\n"
"		final Calendar c = GregorianCalendar.getInstance();\n"
"		return c.get(Calendar.YEAR);\n"
"	}\n"
"\n"
"}\n"
;
